===========================================
export
===========================================

export a, B, c1, _d;

---

(source_file
    (export_declaration
        (identifier)
        (identifier)
        (identifier)
        (identifier)
    )
)

===========================================
enum
===========================================

enum CharacterDirection {
  eDirectionDown = 0,
  eDirectionLeft,
  eDirectionRight,
  eDirectionUp,
  eDirectionDownRight,
  eDirectionUpRight,
  eDirectionDownLeft,
  eDirectionUpLeft,
  eDirectionNone = SCR_NO_VALUE
};

---

(source_file
    (enum_declaration
        (type_identifier)
        (enumerator_list
            (enumerator (identifier) (number_literal))
            (enumerator (identifier))
            (enumerator (identifier))
            (enumerator (identifier))
            (enumerator (identifier))
            (enumerator (identifier))
            (enumerator (identifier))
            (enumerator (identifier))
            (enumerator (identifier) (identifier))
        )
    )
)


===========================================
import function
===========================================

import function HelloWorld();

---

(source_file
    (import_declaration
        (function_declaration
            (function_type)
            (function_import_declarator
                (identifier)
                (parameter_import_list)
            )
        )
    )
)

===========================================
import complex function
===========================================

import protected int HelloWorld(const int a, float, char c = 'c');

---

(source_file
    (import_declaration
        (function_declaration
            (access_specifier)
            (primitive_type)
            (function_import_declarator
                (identifier)
                (parameter_import_list
                    (parameter_import_declaration (type_qualifier) (primitive_type) (enumerator (identifier)))
                    (parameter_import_declaration (primitive_type))
                    (parameter_import_declaration (primitive_type) (enumerator (identifier) (char_literal)))
                )
            )
        )
    )
)

===========================================
define function
===========================================

function HelloWorld()
{
}

---

(source_file
    (function_definition
        (function_type)
        (function_declarator
            (identifier)
            (parameter_list)
        )
        (compound_statement)
    )
)

===========================================
define complex function
===========================================

protected int noloopcheck Obj::HelloWorld(const int a, float, char c)
{
}

---

(source_file
    (function_definition
        (access_specifier)
        (primitive_type)
        (function_declarator
            (function_qualifier)
            (scoped_identifier (identifier) (identifier))
            (parameter_list
                (parameter_declaration (type_qualifier) (primitive_type) (identifier))
                (parameter_declaration (primitive_type))
                (parameter_declaration (primitive_type) (identifier))
            )
        )
        (compound_statement)
    )
)

===========================================
struct
===========================================

struct MyModule {

};

---

(source_file
    (struct_declaration
        (type_identifier)
        (field_declaration_list)
    )
)

===========================================
struct with fields
===========================================

struct MyModule {
    int MyVar;
    writeprotected int MyReadOnlyVar;
    protected int my_var;
};

---

(source_file
    (struct_declaration
        (type_identifier)
        (field_declaration_list
            (field_declaration (primitive_type) (field_identifier))
            (field_declaration (field_type_qualifier) (primitive_type) (field_identifier))
            (field_declaration (field_type_qualifier) (primitive_type) (field_identifier))
        )
    )
)

===========================================
extended struct
===========================================

struct MyModule extends MyModuleBase {

};

---

(source_file
    (struct_declaration
        (type_identifier)
        (extends_type (type_identifier))
        (field_declaration_list)
    )
)

===========================================
managed struct
===========================================

managed struct MyModule {
};

---

(source_file
    (struct_declaration
        (struct_type_qualifier)
        (type_identifier)
        (field_declaration_list)
    )
)
