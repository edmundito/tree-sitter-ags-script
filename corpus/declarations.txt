===========================================
declaration
===========================================

int a;
int b, c;
char d = 'd';

---

(script
  (top_level_declaration (primitive_type) (identifier))
  (top_level_declaration (primitive_type) (identifier) (identifier))
  (top_level_declaration
    (primitive_type)
    (init_literal_declarator (identifier) (char_literal))))

===========================================
export
===========================================

export a, B, c1, _d;

---

(script
  (export_declaration
    (identifier)
    (identifier)
    (identifier)
    (identifier)))

===========================================
enum
===========================================

enum CharacterDirection {
  eDirectionDown = 0,
  eDirectionLeft,
  eDirectionRight,
  eDirectionUp,
  eDirectionDownRight,
  eDirectionUpRight,
  eDirectionDownLeft,
  eDirectionUpLeft,
  eDirectionNone = SCR_NO_VALUE
};

---

(script
  (enum_declaration
    (type_identifier)
    (enumerator_list
      (enumerator (identifier) (number_literal))
      (enumerator (identifier))
      (enumerator (identifier))
      (enumerator (identifier))
      (enumerator (identifier))
      (enumerator (identifier))
      (enumerator (identifier))
      (enumerator (identifier))
      (enumerator (identifier) (identifier)))))

===========================================
import function
===========================================

import function HelloWorld();

---

(script
  (import_declaration
    (function_type)
    (function_import_declarator
      (identifier)
      (parameter_import_list))))

===========================================
import complex function
===========================================

import protected int HelloWorld(const int a, float, char c = 'c');

---

(script
  (import_declaration
    (function_access_specifier)
    (primitive_type)
    (function_import_declarator
      (identifier)
      (parameter_import_list
        (parameter_import_declaration (parameter_type_qualifier) (primitive_type) (identifier))
        (parameter_import_declaration (primitive_type))
        (parameter_import_declaration (primitive_type) (init_literal_declarator (identifier) (char_literal)))
      )
    )
  )
)

===========================================
define function
===========================================

function HelloWorld()
{
}

---

(script
  (function_definition
    (function_type)
    (function_declarator
      (identifier)
      (parameter_list)
    )
    (compound_statement)
  )
)

===========================================
define complex function
===========================================

protected int noloopcheck Obj::HelloWorld(const int a, float, char c)
{
}

---

(script
  (function_definition
    (function_access_specifier)
    (primitive_type)
    (function_declarator
      (function_qualifier)
      (scoped_identifier (type_identifier) (identifier))
      (parameter_list
        (parameter_declaration (parameter_type_qualifier) (primitive_type) (identifier))
        (parameter_declaration (primitive_type))
        (parameter_declaration (primitive_type) (identifier))
      )
    )
    (compound_statement)
  )
)

===========================================
struct
===========================================

struct MyModule {

};

---

(script
  (struct_declaration
    (type_identifier)
    (field_declaration_list)
  )
)

===========================================
struct with fields
===========================================

struct MyModule {
  int MyVar;
  writeprotected int MyReadOnlyVar;
  protected int my_var;
};

---

(script
  (struct_declaration
    (type_identifier)
    (field_declaration_list
      (field_declaration (primitive_type) (field_identifier))
      (field_declaration (field_access_specifier) (primitive_type) (field_identifier))
      (field_declaration (field_access_specifier) (primitive_type) (field_identifier))
    )
  )
)

===========================================
struct with functions
===========================================

struct MyModule {
  import function Method();
  import protected static function ProtectedStaticMethod();
};

---

(script
  (struct_declaration
    (type_identifier)
    (field_declaration_list
      (field_function_declaration
        (function_access_specifier)
        (function_type)
        (function_field_declarator (field_identifier) (parameter_field_list))
      )
      (field_function_declaration
        (function_access_specifier)
        (function_access_specifier)
        (function_access_specifier)
        (function_type)
        (function_field_declarator (field_identifier) (parameter_field_list))
      )
    )
  )
)

===========================================
extended struct
===========================================

struct MyModule extends MyModuleBase {
};

---

(script
  (struct_declaration
    (type_identifier)
    (extends_type (type_identifier))
    (field_declaration_list)
  )
)

===========================================
managed struct
===========================================

managed struct MyModule {
};

---

(script
  (struct_declaration
    (struct_type_qualifier)
    (type_identifier)
    (field_declaration_list)
  )
)
